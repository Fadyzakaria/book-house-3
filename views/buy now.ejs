<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Complete Your Order - The Art of Fiction | BookHouse</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600&family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/buy now.css">
</head>
<body>
    <div class="page-wrapper">
        <div class="order-header">
            <a href="/art-of-fiction" class="back-link">
                <i class="fas fa-arrow-left"></i>
                Back to Book
            </a>
            <h1 class="page-title">Complete Your Order</h1>
        </div>

        <div class="order-container">
            <div class="order-form animate-in">
                <div class="book-preview">
                    <img src="fady.jpg" alt="The Art of Fiction" class="book-image">
                    <div class="book-info">
                        <h3>The Art of Fiction</h3>
                        <p class="author">by Henry James</p>
                        <p class="price">$24.99</p>
                        <div class="quantity-control">
                            <button class="quantity-btn" onclick="updateQuantity(-1)">-</button>
                            <input type="number" class="quantity-input" id="quantity" value="1" min="1" max="10">
                            <button class="quantity-btn" onclick="updateQuantity(1)">+</button>
                        </div>
                    </div>
                </div>

                <form id="orderForm" onsubmit="return handleOrder(event)">
                    <div class="form-section">
                        <h3 class="section-title">Contact Information</h3>
                        <div class="input-group">
                            <label class="input-label" for="email">Email Address</label>
                            <input 
                                type="email" 
                                id="email" 
                                class="input-field" 
                                required 
                                pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
                                oninput="validateEmail(this)"
                                placeholder="Enter your email address"
                            >
                            <span class="validation-message" id="emailError"></span>
                        </div>
                        <div class="input-group">
                            <label class="input-label" for="phone">Phone Number</label>
                            <div class="input-with-validation">
                                <input 
                                    type="tel" 
                                    id="phone" 
                                    class="input-field" 
                                    required 
                                    pattern="[0-9]{10}"
                                    onkeypress="return validatePhoneNumber(event)"
                                    oninput="formatPhoneNumber(this)"
                                    maxlength="12"
                                    placeholder="Enter your phone number"
                                >
                                <span class="validation-message" id="phoneError"></span>
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <h3 class="section-title">Shipping Address</h3>
                        <div class="input-group">
                            <label class="input-label" for="fullName">Full Name</label>
                            <div class="input-with-validation">
                                <input 
                                    type="text" 
                                    id="fullName" 
                                    class="input-field" 
                                    required 
                                    pattern="[A-Za-z\s]+"
                                    onkeypress="return validateFullName(event)"
                                    oninput="validateFullNameInput(this)"
                                    placeholder="Enter your full name"
                                >
                                <span class="validation-message" id="nameError"></span>
                            </div>
                        </div>
                        <div class="input-group">
                            <label class="input-label" for="address">Street Address</label>
                            <input 
                                type="text" 
                                id="address" 
                                class="input-field" 
                                required 
                                onkeypress="return validateAddress(event)"
                                oninput="validateAddressInput(this)"
                                placeholder="Enter your street address"
                            >
                            <span class="validation-message" id="addressError"></span>
                        </div>
                        <div class="input-row">
                            <div class="input-group">
                                <label class="input-label" for="city">City</label>
                                <input 
                                    type="text" 
                                    id="city" 
                                    class="input-field" 
                                    required 
                                    pattern="[A-Za-z\s]+"
                                    onkeypress="return validateCity(event)"
                                    oninput="this.value = this.value.replace(/[^A-Za-z\s]/g, '')"
                                    placeholder="Enter your city"
                                >
                                <span class="validation-message" id="cityError"></span>
                            </div>
                            <div class="input-group">
                                <label class="input-label" for="zipCode">ZIP Code</label>
                                <input 
                                    type="text" 
                                    id="zipCode" 
                                    class="input-field" 
                                    required 
                                    pattern="[0-9]{5}"
                                    onkeypress="return validateZipCode(event)"
                                    oninput="this.value = this.value.replace(/[^0-9]/g, '')"
                                    maxlength="5"
                                    placeholder="Enter ZIP code"
                                >
                                <span class="validation-message" id="zipError"></span>
                            </div>
                        </div>
                        <div class="input-group">
                            <label class="input-label" for="country">Country</label>
                            <select id="country" class="input-field select-field" required>
                                <option value="">Select your country</option>
                                <option value="AR">Argentina</option>
                                <option value="BR">Brazil</option>
                                <option value="CN">China</option>
                                <option value="EG">Egypt</option>
                                <option value="FR">France</option>
                                <option value="DE">Germany</option>
                                <option value="GR">Greece</option>
                                <option value="HK">Hong Kong</option>
                                <option value="IN">India</option>
                                <option value="ID">Indonesia</option>
                                <option value="IE">Ireland</option>
                                <option value="IL">Israel</option>
                                <option value="IT">Italy</option>
                                <option value="JP">Japan</option>
                                <option value="MY">Malaysia</option>
                                <option value="MX">Mexico</option>
                                <option value="NL">Netherlands</option>
                                <option value="NZ">New Zealand</option>
                                <option value="NG">Nigeria</option>
                                <option value="PK">Pakistan</option>
                                <option value="PH">Philippines</option>
                                <option value="PL">Poland</option>
                                <option value="PT">Portugal</option>
                                <option value="RU">Russia</option>
                                <option value="SA">Saudi Arabia</option>
                                <option value="SG">Singapore</option>
                                <option value="ZA">South Africa</option>
                                <option value="KR">South Korea</option>
                                <option value="ES">Spain</option>
                                <option value="SE">Sweden</option>
                                <option value="CH">Switzerland</option>
                                <option value="TH">Thailand</option>
                                <option value="TR">Turkey</option>
                                <option value="AE">United Arab Emirates</option>
                                <option value="VN">Vietnam</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-section">
                        <h3 class="section-title">Order Notes</h3>
                        <div class="input-group">
                            <label class="input-label" for="notes">Special Instructions (Optional)</label>
                            <textarea id="notes" class="input-field" rows="3"></textarea>
                        </div>
                    </div>
                </form>
            </div>

            <div class="order-summary animate-in">
                <h2 class="summary-title">Order Summary</h2>
                <div class="summary-item">
                    <span>Book Price</span>
                    <span>$24.99</span>
                </div>
                <div class="summary-item">
                    <span>Quantity</span>
                    <span id="summaryQuantity">1</span>
                </div>
                <div class="summary-item">
                    <span>Subtotal</span>
                    <span id="subtotal">$24.99</span>
                </div>
                <div class="summary-item">
                    <span>Shipping</span>
                    <span>$4.99</span>
                </div>
                <div class="summary-total">
                    <span>Total</span>
                    <span id="total">$29.98</span>
                </div>
                <button class="place-order-btn" onclick="document.getElementById('orderForm').requestSubmit()">
                    Place Order
                </button>
                <div class="shipping-info">
                    <i class="fas fa-truck"></i>
                    Estimated delivery: 3-5 business days
                </div>
            </div>
        </div>
    </div>

    <div class="cart-count-display">
        Cart Items: <span id="headerCartCount">0</span>
    </div>

    <script>
        // Initialize the page with stored quantity
        function initializePage() {
            const storedQuantity = localStorage.getItem('bookQuantity');
            if (storedQuantity) {
                document.getElementById('quantity').value = storedQuantity;
                updateOrderSummary();
            }
        }

        function updateQuantity(change) {
            const input = document.getElementById('quantity');
            let value = parseInt(input.value) + change;
            value = Math.max(1, Math.min(10, value));
            input.value = value;
            localStorage.setItem('bookQuantity', value);
            updateOrderSummary();
            updateCartCount(value);
        }

        function updateOrderSummary() {
            const quantity = parseInt(document.getElementById('quantity').value);
            const pricePerBook = 24.99;
            const shippingCost = 4.99;
            
            const subtotal = quantity * pricePerBook;
            const total = subtotal + shippingCost;

            document.getElementById('summaryQuantity').textContent = quantity;
            document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;
            document.getElementById('total').textContent = `$${total.toFixed(2)}`;
        }

        function updateCartCount(quantity) {
            localStorage.setItem('cartCount', quantity);
        }

        function handleOrder(event) {
            event.preventDefault();
            
            const button = document.querySelector('.place-order-btn');
            const originalText = button.textContent;
            button.textContent = 'Processing...';
            button.disabled = true;

            setTimeout(() => {
                alert('Thank you for your order! We will contact you shortly with payment details and order confirmation.');
                // Clear storage after successful order
                localStorage.removeItem('bookQuantity');
                localStorage.removeItem('cartCount');
                window.location.href = 'index.html';
            }, 2000);

            return false;
        }

        // Add quantity input event listener
        document.getElementById('quantity').addEventListener('input', function() {
            let value = parseInt(this.value);
            if (isNaN(value) || value < 1) value = 1;
            if (value > 10) value = 10;
            this.value = value;
            localStorage.setItem('bookQuantity', value);
            updateOrderSummary();
            updateCartCount(value);
        });

        // Initialize the page when loaded
        document.addEventListener('DOMContentLoaded', initializePage);

        // Email validation
        function validateEmail(input) {
            const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            const errorElement = document.getElementById('emailError');
            
            if (input.value === '') {
                errorElement.textContent = 'Email is required';
                input.setCustomValidity('Email is required');
            } else if (!emailRegex.test(input.value)) {
                errorElement.textContent = 'Please enter a valid email address';
                input.setCustomValidity('Please enter a valid email address');
            } else {
                errorElement.textContent = '';
                input.setCustomValidity('');
                input.classList.add('valid');
            }
        }

        // ZIP code validation
        function validateZipCode(event) {
            const charCode = event.which || event.keyCode;
            const zipInput = document.getElementById('zipCode');
            const errorElement = document.getElementById('zipError');
            
            // Allow only numbers (0-9) and control keys
            if ((charCode >= 48 && charCode <= 57) || // Numbers
                charCode === 8 || // Backspace
                charCode === 9) { // Tab
                
                // Clear error if showing
                errorElement.textContent = '';
                return true;
            }
            
            // Show error message
            errorElement.textContent = 'Please enter numbers only';
            event.preventDefault();
            return false;
        }

        // Add paste event handler for ZIP code
        document.getElementById('zipCode').addEventListener('paste', function(e) {
            e.preventDefault();
            const pastedText = (e.clipboardData || window.clipboardData).getData('text');
            const filteredText = pastedText.replace(/[^0-9]/g, '').slice(0, 5);
            this.value = filteredText;
        });

        // City validation - letters and spaces only
        function validateCity(event) {
            const charCode = event.which || event.keyCode;
            const cityInput = document.getElementById('city');
            const errorElement = document.getElementById('cityError');
            
            // Allow only letters (A-Z, a-z), space, and control keys
            if ((charCode >= 65 && charCode <= 90) || // Uppercase letters
                (charCode >= 97 && charCode <= 122) || // Lowercase letters
                charCode === 32 || // Space
                charCode === 8 || // Backspace
                charCode === 9) { // Tab
                
                errorElement.textContent = '';
                return true;
            }
            
            // Show error message
            errorElement.textContent = 'Please enter letters only';
            event.preventDefault();
            return false;
        }

        // Address validation - letters, numbers, and some special characters
        function validateAddress(event) {
            const charCode = event.which || event.keyCode;
            const addressInput = document.getElementById('address');
            const errorElement = document.getElementById('addressError');
            
            // Allow letters, numbers, spaces, and common address characters
            if ((charCode >= 65 && charCode <= 90) || // Uppercase letters
                (charCode >= 97 && charCode <= 122) || // Lowercase letters
                (charCode >= 48 && charCode <= 57) || // Numbers
                charCode === 32 || // Space
                charCode === 44 || // Comma
                charCode === 45 || // Hyphen
                charCode === 46 || // Period
                charCode === 35 || // #
                charCode === 8 || // Backspace
                charCode === 9) { // Tab
                
                errorElement.textContent = '';
                return true;
            }
            
            // Show error message
            errorElement.textContent = 'Please enter a valid address';
            event.preventDefault();
            return false;
        }

        function validateAddressInput(input) {
            // Remove any characters that aren't letters, numbers, spaces, or allowed special characters
            input.value = input.value.replace(/[^A-Za-z0-9\s,.\-#]/g, '');
        }

        // Handle paste event for city
        document.getElementById('city').addEventListener('paste', function(e) {
            e.preventDefault();
            const pastedText = (e.clipboardData || window.clipboardData).getData('text');
            const filteredText = pastedText.replace(/[^A-Za-z\s]/g, '');
            
            // Insert filtered text at cursor position
            const start = this.selectionStart;
            const end = this.selectionEnd;
            const currentValue = this.value;
            this.value = currentValue.substring(0, start) + filteredText + currentValue.substring(end);
            
            // Move cursor to end of pasted text
            this.setSelectionRange(start + filteredText.length, start + filteredText.length);
        });

        // Handle paste event for address
        document.getElementById('address').addEventListener('paste', function(e) {
            e.preventDefault();
            const pastedText = (e.clipboardData || window.clipboardData).getData('text');
            const filteredText = pastedText.replace(/[^A-Za-z0-9\s,.\-#]/g, '');
            
            // Insert filtered text at cursor position
            const start = this.selectionStart;
            const end = this.selectionEnd;
            const currentValue = this.value;
            this.value = currentValue.substring(0, start) + filteredText + currentValue.substring(end);
            
            // Move cursor to end of pasted text
            this.setSelectionRange(start + filteredText.length, start + filteredText.length);
        });

        // Format city (capitalize first letter of each word)
        document.getElementById('city').addEventListener('blur', function() {
            if (this.value) {
                this.value = this.value.toLowerCase().replace(/\b\w/g, letter => letter.toUpperCase());
            }
        });

        // Full name validation
        function validateFullName(event) {
            const charCode = event.which || event.keyCode;
            const nameInput = document.getElementById('fullName');
            const errorElement = document.getElementById('nameError');
            
            // Allow only letters (A-Z, a-z), space, and control keys
            if ((charCode >= 65 && charCode <= 90) || // Uppercase letters
                (charCode >= 97 && charCode <= 122) || // Lowercase letters
                charCode === 32 || // Space
                charCode === 8 || // Backspace
                charCode === 9) { // Tab
                
                errorElement.textContent = '';
                return true;
            }
            
            // Show error message
            errorElement.textContent = 'Please enter letters only';
            event.preventDefault();
            return false;
        }

        // Full name input validation and formatting
        function validateFullNameInput(input) {
            // Remove any characters that aren't letters or spaces
            input.value = input.value.replace(/[^A-Za-z\s]/g, '');
            
            // Remove multiple spaces
            input.value = input.value.replace(/\s+/g, ' ');
            
            const errorElement = document.getElementById('nameError');
            
            // Check if input contains at least one letter
            if (input.value.trim().length > 0 && !/[A-Za-z]/.test(input.value)) {
                errorElement.textContent = 'Name must contain letters';
                input.classList.remove('valid');
            } else {
                errorElement.textContent = '';
                if (input.value.trim().length > 0) {
                    input.classList.add('valid');
                } else {
                    input.classList.remove('valid');
                }
            }
        }

        // Handle paste event for full name
        document.getElementById('fullName').addEventListener('paste', function(e) {
            e.preventDefault();
            const pastedText = (e.clipboardData || window.clipboardData).getData('text');
            const filteredText = pastedText.replace(/[^A-Za-z\s]/g, '').replace(/\s+/g, ' ');
            
            // Insert filtered text at cursor position
            const start = this.selectionStart;
            const end = this.selectionEnd;
            const currentValue = this.value;
            this.value = currentValue.substring(0, start) + filteredText + currentValue.substring(end);
            
            // Move cursor to end of pasted text
            this.setSelectionRange(start + filteredText.length, start + filteredText.length);
            
            // Validate the input
            validateFullNameInput(this);
        });

        // Auto-capitalize first letter of each word on blur
        document.getElementById('fullName').addEventListener('blur', function() {
            if (this.value) {
                this.value = this.value.toLowerCase().replace(/\b\w/g, letter => letter.toUpperCase());
            }
        });

        // Phone number validation for keypress
        function validatePhoneNumber(event) {
            const charCode = event.which || event.keyCode;
            const phoneInput = document.getElementById('phone');
            const errorElement = document.getElementById('phoneError');
            
            // Allow only numbers (0-9) and control keys
            if ((charCode >= 48 && charCode <= 57) || // Numbers
                charCode === 8 || // Backspace
                charCode === 9) { // Tab
                
                errorElement.textContent = '';
                return true;
            }
            
            // Show error message
            errorElement.textContent = 'Please enter numbers only';
            event.preventDefault();
            return false;
        }

        // Format phone number as user types
        function formatPhoneNumber(input) {
            // Remove all non-numeric characters
            let numbers = input.value.replace(/\D/g, '');
            
            // Format the number as XXX-XXX-XXXX
            if (numbers.length > 0) {
                if (numbers.length <= 3) {
                    input.value = numbers;
                } else if (numbers.length <= 6) {
                    input.value = `${numbers.slice(0, 3)}-${numbers.slice(3)}`;
                } else {
                    input.value = `${numbers.slice(0, 3)}-${numbers.slice(3, 6)}-${numbers.slice(6, 10)}`;
                }
            }

            // Validate length and update visual feedback
            const errorElement = document.getElementById('phoneError');
            if (numbers.length === 10) {
                errorElement.textContent = '';
                input.classList.add('valid');
            } else if (numbers.length > 0) {
                errorElement.textContent = 'Please enter a 10-digit phone number';
                input.classList.remove('valid');
            } else {
                errorElement.textContent = '';
                input.classList.remove('valid');
            }
        }

        // Handle paste event for phone number
        document.getElementById('phone').addEventListener('paste', function(e) {
            e.preventDefault();
            const pastedText = (e.clipboardData || window.clipboardData).getData('text');
            const numbers = pastedText.replace(/\D/g, '').slice(0, 10);
            
            // Format and set the value
            if (numbers.length > 0) {
                if (numbers.length <= 3) {
                    this.value = numbers;
                } else if (numbers.length <= 6) {
                    this.value = `${numbers.slice(0, 3)}-${numbers.slice(3)}`;
                } else {
                    this.value = `${numbers.slice(0, 3)}-${numbers.slice(3, 6)}-${numbers.slice(6, 10)}`;
                }
            }
            
            // Trigger validation
            formatPhoneNumber(this);
        });
    </script>
</body>
</html> 